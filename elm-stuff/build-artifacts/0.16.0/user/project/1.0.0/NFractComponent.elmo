Elm.NFractComponent = Elm.NFractComponent || {};
Elm.NFractComponent.make = function (_elm) {
   "use strict";
   _elm.NFractComponent = _elm.NFractComponent || {};
   if (_elm.NFractComponent.values) return _elm.NFractComponent.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $NestedFraction = Elm.NestedFraction.make(_elm),
   $PieChart = Elm.PieChart.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var radius = 1;
   var empty = A2($Graphics$Collage.filled,$Color.black,$Graphics$Collage.circle(0));
   var colors = function (model) {
      return _U.list([A4($Color.hsla,$Basics.turns($Basics.fst(model.hues)),0.7,0.6,0.2)
                     ,A4($Color.hsla,$Basics.turns($Basics.snd(model.hues)),0.6,0.1,1)
                     ,A4($Color.hsla,0,0.2,0.7,0.2)]);
   };
   var color1 = function (model) {
      var clrs = colors(model);
      var _p0 = $List.head(clrs);
      if (_p0.ctor === "Just") {
            return _p0._0;
         } else {
            return $Color.black;
         }
   };
   var circlePackTransform = F2(function (numer,denom) {
      var lilAng = $Basics.turns(0.5 * (1 / $Basics.toFloat(denom)));
      var st = $Basics.sin(lilAng);
      var lilR = radius * st / (st + 1);
      var dist = radius - lilR;
      var scale = lilR / radius;
      var rot = $Basics.toFloat(numer) * (2 * lilAng);
      var move = $Basics.fromPolar({ctor: "_Tuple2",_0: dist,_1: rot + lilAng});
      return function (_p1) {
         return A2($Graphics$Collage.move,move,A2($Graphics$Collage.rotate,rot + lilAng,A2($Graphics$Collage.scale,scale,_p1)));
      };
   });
   var past = function (nf) {
      var _p2 = nf;
      if (_p2.ctor === "Whole") {
            return $NestedFraction.Whole(_p2._0);
         } else {
            return $NestedFraction.one(_p2._1);
         }
   };
   var view = F2(function (address,model) {
      var _p3 = model.nfract;
      if (_p3.ctor === "Whole") {
            return A2($Graphics$Collage.filled,color1(model),$Graphics$Collage.circle(radius));
         } else {
            var _p7 = _p3._1;
            var _p6 = _p3._2;
            var pastChildModel = _U.update(model,{nfract: past(model.nfract)});
            var _p4 = {ctor: "_Tuple2",_0: $NestedFraction.floor(_p7),_1: $NestedFraction.rem(_p7)};
            var nFloor = _p4._0;
            var nRem = _p4._1;
            var parent = A2($PieChart.pieChart,_U.list([nFloor,A2($Basics.min,1,_p6 - nFloor),_p6 - nFloor - 1]),colors(model));
            var presentChildModel = _U.update(model,{nfract: nRem});
            var presentChild = function () {    var _p5 = _p3._0;return A2(view,address,presentChildModel);}();
            var pastChildren = A2($List.repeat,nFloor,A2(view,address,pastChildModel));
            return $Graphics$Collage.group(A2($Basics._op["++"],
            _U.list([parent,A3(circlePackTransform,nFloor,_p6,presentChild)]),
            A3($List.map2,A2($Basics.flip,circlePackTransform,_p6),_U.range(0,nFloor),pastChildren)));
         }
   });
   var isoView = function () {    var nowhere = A2($Signal.forwardTo,$Signal.mailbox($Maybe.Nothing).address,$Maybe.Just);return view(nowhere);}();
   var update = F2(function (action,model) {
      var _p8 = action;
      if (_p8.ctor === "SetHues") {
            return _U.update(model,{hues: _p8._0});
         } else {
            return _U.update(model,{nfract: _p8._0});
         }
   });
   var SetHues = function (a) {    return {ctor: "SetHues",_0: a};};
   var SetNFract = function (a) {    return {ctor: "SetNFract",_0: a};};
   var init = F2(function (nf,hues) {    return {nfract: nf,hues: hues};});
   var Model = F2(function (a,b) {    return {nfract: a,hues: b};});
   return _elm.NFractComponent.values = {_op: _op
                                        ,Model: Model
                                        ,init: init
                                        ,SetNFract: SetNFract
                                        ,SetHues: SetHues
                                        ,update: update
                                        ,view: view
                                        ,isoView: isoView
                                        ,past: past
                                        ,circlePackTransform: circlePackTransform
                                        ,colors: colors
                                        ,color1: color1
                                        ,empty: empty
                                        ,radius: radius};
};